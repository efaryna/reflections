What happens when you initialize a repository? Why do you need to do it?
-a .git folder is created. So that we can begin to track changes.

How is the staging area different from the working directory and the repository? What value do you think it offers?
-the staging area is in the working directory but outside of the repository. It allows you to maintain your work flow

How can you use the staging area to make sure you have one commit per logical change?
-run git diff to compare the working directory to the staging area, then remove any files that are outside of one logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
-When creating experimental features, adding languages, radical changes. Branches will help keep the original intact.

How do the diagrams help you visualize the branch structure?
They let you see the branches in one place and follow them back in time.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
-all the changes are combined into one branch. to show that there are two paths in the single branch (two parents).

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
-Automatic merging is faster but it may not resolve some conflicts.

Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.